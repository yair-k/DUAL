{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport useStopWatch from './useStopWatch';\nimport _ from 'lodash';\nconst INPUTS = Object.freeze({\n  ARROW: ['up', 'down', 'left', 'right'],\n  LETTER: ['w', 'a', 's', 'd']\n});\nconst VALID_KEYS = {\n  87: 'w',\n  65: 'a',\n  83: 's',\n  68: 'd',\n  38: 'up',\n  40: 'down',\n  37: 'left',\n  39: 'right'\n};\nconst GAME_STATE = {\n  NEW: 'new',\n  RUNNING: 'running',\n  END: 'end'\n};\n\nconst useGame = () => {\n  _s();\n\n  const [generateCount, setGenerateCount] = useState(20);\n  const [letterSequence, setLetterSequence] = useState([]);\n  const [arrowSequence, setArrowSequence] = useState([]);\n  const {\n    elapsedTime,\n    startStopWatch,\n    stopStopWatch,\n    resetStopWatch\n  } = useStopWatch();\n  const [progress, setProgress] = useState({\n    arrow: 0,\n    letter: 0\n  });\n  const [gameState, setGameState] = useState(GAME_STATE.NEW);\n  const [letterLog, setLetterLogs] = useState([]);\n  const [arrowLog, setArrowLogs] = useState([]); // Generate new sequence \n\n  const generateSequence = () => {\n    let sequenceArrow = [];\n    let sequenceLetter = [];\n\n    for (let i = 0; i < generateCount; i++) {\n      sequenceArrow.push({\n        key: `arrow${i}`,\n        input: INPUTS.ARROW[_.random(3)]\n      });\n      sequenceLetter.push({\n        key: `letter${i}`,\n        input: INPUTS.LETTER[_.random(3)]\n      });\n    }\n\n    setArrowSequence(sequenceArrow);\n    setLetterSequence(sequenceLetter);\n  }; // Handle correct wasd⬆⬇⬅➡ inputs\n\n\n  const gameButtonPress = keyCode => {\n    if (Object.keys(VALID_KEYS).includes(keyCode.toString())) {\n      if (gameState === GAME_STATE.NEW) {\n        startStopWatch();\n        setGameState(GAME_STATE.RUNNING);\n      }\n\n      let enteredKey = VALID_KEYS[keyCode];\n\n      if (arrowSequence.length > 0) {\n        if (arrowSequence[0].input === enteredKey) {\n          setArrowSequence(arrowSequence.slice(1));\n          logInput(enteredKey, 'arrow', true);\n          return true;\n        } else if (INPUTS.ARROW.includes(enteredKey)) {\n          logInput(enteredKey, 'arrow', false);\n          return false;\n        }\n      }\n\n      if (letterSequence.length > 0) {\n        if (letterSequence[0].input === enteredKey) {\n          setLetterSequence(letterSequence.slice(1));\n          logInput(enteredKey, 'letter', true);\n          return true;\n        } else if (INPUTS.LETTER.includes(enteredKey)) {\n          logInput(enteredKey, 'letter', false);\n          return false;\n        }\n      }\n\n      return false;\n    }\n  }; // Check for game end\n\n\n  useEffect(() => {\n    if (arrowSequence.length === 0 && letterSequence.length === 0 && gameState !== 'new') {\n      stopStopWatch();\n      setGameState(GAME_STATE.END);\n    }\n  }, [letterSequence, arrowSequence, stopStopWatch, gameState]); // Handle reset game\n\n  const resetGame = () => {\n    setGameState(GAME_STATE.NEW);\n    stopStopWatch();\n    resetStopWatch();\n    generateSequence();\n    setLetterLogs([]);\n    setArrowLogs([]);\n  }; // Update game progress on successful key input\n\n\n  useEffect(() => {\n    const arrowCount = arrowSequence.length;\n    const letterCount = letterSequence.length;\n    setProgress({\n      arrow: (generateCount - arrowCount) / generateCount,\n      letter: (generateCount - letterCount) / generateCount\n    });\n  }, [letterSequence, arrowSequence, setProgress, generateCount]); // Log User Input\n\n  const logInput = (key, type, wasCorrect) => {\n    const newLog = {\n      key,\n      type,\n      timePressed: elapsedTime,\n      correct: wasCorrect\n    };\n\n    if (INPUTS.LETTER.includes(key)) {\n      setLetterLogs([...letterLog, newLog]);\n    } else if (INPUTS.ARROW.includes(key)) {\n      setArrowLogs([...arrowLog, newLog]);\n    }\n  };\n\n  return {\n    resetGame: () => resetGame(),\n    sequence: {\n      letters: letterSequence,\n      arrows: arrowSequence\n    },\n    generateSequence: () => generateSequence(),\n    generateCount,\n    changeGenerateCount: number => setGenerateCount(number),\n    insertInput: keyCode => gameButtonPress(keyCode),\n    gameState,\n    progress,\n    logs: {\n      letterLog,\n      arrowLog\n    },\n    stopWatch: {\n      time: elapsedTime,\n      start: () => startStopWatch,\n      stop: () => stopStopWatch,\n      reset: () => resetStopWatch\n    }\n  };\n};\n\n_s(useGame, \"pVDxnZsyLX5XDYmS3Q223Olmnns=\", false, function () {\n  return [useStopWatch];\n});\n\nexport default useGame;","map":{"version":3,"names":["useState","useEffect","useStopWatch","_","INPUTS","Object","freeze","ARROW","LETTER","VALID_KEYS","GAME_STATE","NEW","RUNNING","END","useGame","generateCount","setGenerateCount","letterSequence","setLetterSequence","arrowSequence","setArrowSequence","elapsedTime","startStopWatch","stopStopWatch","resetStopWatch","progress","setProgress","arrow","letter","gameState","setGameState","letterLog","setLetterLogs","arrowLog","setArrowLogs","generateSequence","sequenceArrow","sequenceLetter","i","push","key","input","random","gameButtonPress","keyCode","keys","includes","toString","enteredKey","length","slice","logInput","resetGame","arrowCount","letterCount","type","wasCorrect","newLog","timePressed","correct","sequence","letters","arrows","changeGenerateCount","number","insertInput","logs","stopWatch","time","start","stop","reset"],"sources":["C:/Users/yairk/OneDrive/Desktop/wasd-master/src/hooks/useGame.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport useStopWatch from './useStopWatch'\nimport _ from 'lodash'\n\nconst INPUTS = Object.freeze({\n  ARROW: ['up', 'down', 'left', 'right'],\n  LETTER: ['w', 'a', 's', 'd']\n})\n\nconst VALID_KEYS = {\n  87: 'w',\n  65: 'a',\n  83: 's',\n  68: 'd',\n  38: 'up',\n  40: 'down',\n  37: 'left',\n  39: 'right'\n}\n\nconst GAME_STATE = {\n  NEW: 'new',\n  RUNNING: 'running',\n  END: 'end',\n}\n\nconst useGame = () => {\n  const [generateCount, setGenerateCount] = useState(20)\n  const [letterSequence, setLetterSequence] = useState([])\n  const [arrowSequence, setArrowSequence] = useState([])\n  const { elapsedTime, startStopWatch, stopStopWatch, resetStopWatch } = useStopWatch()\n  const [progress, setProgress] = useState({ arrow: 0, letter: 0 })\n  const [gameState, setGameState] = useState(GAME_STATE.NEW)\n  const [letterLog, setLetterLogs] = useState([])\n  const [arrowLog, setArrowLogs] = useState([])\n\n  // Generate new sequence \n  const generateSequence = () => {\n    let sequenceArrow = []\n    let sequenceLetter = []\n\n    for (let i = 0; i < generateCount; i++) {\n      sequenceArrow.push({key: `arrow${i}`, input: INPUTS.ARROW[_.random(3)]})\n      sequenceLetter.push({key: `letter${i}`, input: INPUTS.LETTER[_.random(3)]})\n    }\n\n    setArrowSequence(sequenceArrow)\n    setLetterSequence(sequenceLetter)\n  }\n\n\n  // Handle correct wasd⬆⬇⬅➡ inputs\n  const gameButtonPress = (keyCode) => {\n    if (Object.keys(VALID_KEYS).includes(keyCode.toString())) {\n\n      if (gameState === GAME_STATE.NEW) {\n        startStopWatch()\n        setGameState(GAME_STATE.RUNNING)\n      }\n\n      let enteredKey = VALID_KEYS[keyCode]\n\n      if (arrowSequence.length > 0) {\n        if (arrowSequence[0].input === enteredKey) {\n          setArrowSequence(arrowSequence.slice(1))\n          logInput(enteredKey, 'arrow', true)\n          return true\n        } else if (INPUTS.ARROW.includes(enteredKey)) {\n          logInput(enteredKey, 'arrow', false)\n          return false\n        }\n      }\n\n      if (letterSequence.length > 0) {\n        if (letterSequence[0].input === enteredKey) {\n          setLetterSequence(letterSequence.slice(1))\n          logInput(enteredKey, 'letter', true)\n          return true\n        } else if (INPUTS.LETTER.includes(enteredKey)) {\n          logInput(enteredKey, 'letter', false)\n          return false\n        }\n        \n      }\n      return false\n    }\n  }\n\n\n  // Check for game end\n  useEffect(() => {\n    if (arrowSequence.length === 0 && letterSequence.length === 0 && gameState !== 'new') {\n      stopStopWatch()\n      setGameState(GAME_STATE.END)\n    }\n  }, [letterSequence, arrowSequence, stopStopWatch, gameState])\n\n  // Handle reset game\n  const resetGame = () => {\n    setGameState(GAME_STATE.NEW)\n    stopStopWatch()\n    resetStopWatch()\n    generateSequence()\n    setLetterLogs([])\n    setArrowLogs([])\n  }\n\n  // Update game progress on successful key input\n  useEffect(() => {\n    const arrowCount = arrowSequence.length\n    const letterCount = letterSequence.length\n    setProgress({\n      arrow: (generateCount - arrowCount) / generateCount,\n      letter: (generateCount - letterCount) / generateCount\n    })\n  },[letterSequence, arrowSequence, setProgress, generateCount])\n\n  // Log User Input\n  const logInput = (key, type, wasCorrect) => {\n    const newLog = {\n      key,\n      type,\n      timePressed: elapsedTime,\n      correct: wasCorrect\n    }\n    if (INPUTS.LETTER.includes(key)) {\n      setLetterLogs([...letterLog, newLog])\n    } else if (INPUTS.ARROW.includes(key)) {\n      setArrowLogs([...arrowLog, newLog])\n    }\n  }\n\n  return {\n    resetGame: () => resetGame(),\n    sequence: {\n      letters: letterSequence,\n      arrows: arrowSequence\n    },\n    generateSequence: () => generateSequence(),\n    generateCount,\n    changeGenerateCount: (number) => setGenerateCount(number),\n    insertInput: (keyCode) => gameButtonPress(keyCode),\n    gameState,\n    progress,\n    logs: {\n      letterLog,\n      arrowLog\n    },\n    stopWatch: {\n      time: elapsedTime,\n      start: () => startStopWatch,\n      stop: () => stopStopWatch,\n      reset: () => resetStopWatch\n    }\n  }\n}\n\nexport default useGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}